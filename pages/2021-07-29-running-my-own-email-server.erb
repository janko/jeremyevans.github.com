<h1><%= @title = 'Running My Own Email Server (2021-07-29)' %></h1>

<p>Many people will tell you that running your own email server on the internet is crazy, and that the likely result is the email you send will end up in the recipient's spam folder if it is delivered at all.  They aren't wrong, running your own email server on the internet is up there with rolling your own crypto in the list of technical things you should never do.  While I'm all about defying established convention, there's a twist to this this story that makes it less crazy than it sounds.  Let's go on a journey for the reasons behind the change, alternatives I considered, why I chose to run my own email server, and how I configured it.</p>

<h2>Background</h2>

<p>Prior to running my own email server, I had been using a service called Tuffmail for my email.  There were two reasons for this.  First, they were one of the cheapest email service providers, costing $24/year.  Second, they allowed an unlimited number of email aliases for accounts.  I fancy myself a frugal individual, so the low cost appealed to me.  I also make heavy use of email aliases.  Almost every online service I interact with gets their own email address in my domain.  This allows me to easily see which online services have sold the email address to another party, or had their service hacked and had the email address leaked.  Setting up the aliases did require logging into Tuffmail's website and clicking around, but generally took only a couple minutes per alias.  I currently have about 200 email aliases, though I would guess at least a third I could safely delete.</p>

<p>In terms of interacting with Tuffmail, I used secure POP3 to download received emails, and secure SMTP on the submission port (587) to send emails.  Occassionally I used Tuffmail's web interface if I was worried that a message I expected to receive did not arrive, as that allowed me to check the spam folder (POP3 doesn't support that, it only supports downloading messages from the inbox).  It was very rare for Tuffmail to have false positives for spam, as I tended to use conservative spam settings.</p>

<h2>My Hand is Forced</h2>

<p>I had been using Tuffmail for over 10 years, and was quite happy with their service.  Unfortunately, earlier this month, Tuffmail sent an email to all of their customers stating they they were ceasing operation on January 1, 2022.  So I knew I had to migrate off Tuffmail, and had to decide where to move instead.  I'm not one to procrastinate, so I started looking for alternatives quickly.</p>

<h2>Deciding Among Alternatives</h2>

<p>Tuffmail helpfully included a few alternatives in their email announcing the ceasing of operations, including Fastmail, Proton Mail, Runbox, Greatmail, MX Route, Zoho, Google, and Microsoft. So I looked into each of these options:</p>

<ul>
<li>Fastmail: Their $60/year plan supports custom domains, and they support 600 email aliases per address.  Fastmail was definitely a possibility.</li>
<li>Proton Mail:  Doesn't support POP3, and requires a separate custom bridge program to support IMAP/SMTP. So Proton Mail was out.</li>
<li>Runbox: Only supports 100 email aliases per account, with each additional one being about $1/alias. Price was even lower than Tuffmail ($20/year instead of $24/year), but I couldn't deal with the 100 email aliases limit, so Runbox was out.</li>
<li>Greatmail: Seems to be designed for businesses, smallest plan is $100/year for 8 mailboxes. They support aliases, but I couldn't find documentation on how many.  I though $100/year was too much, so Greatmail was out.</li>
<li>MX Route: I couldn't find documentation on whether they supported aliases, so MX Route was out.</li>
<li>Zoho: Also designed for businesses, seeminly an equivalent to Microsoft 365. I wanted something focused on email, so Zoho was out.</li>
<li>Google: Only allows 30 email aliases per user, so Google was out.</li>
<li>Microsoft: Microsoft 365 supports up to 400 aliases per user, and costs $70/year. However, based on my previous experience with Microsoft 365, it was way too complex for simple email needs.  Additionally, from my research Microsoft 365 is known to completely drop emails after accepting delivery, so Microsoft was out.</li>
</ul>

<p>So of these options, Fastmail was the only service that looked like it would meet my needs.  If Runbox allowed for hundreds of email aliases, I would definitely have considered it.  As I mentioned, I'm frugal, and $60/year just to send and receive email was more than I wanted to spend.  At this point, I considered running my own email server in the cloud.</p>

<p>As I mentioned ealier, running your own email server is kind of crazy, but the actual reason it is crazy is that your email deliverability is probably going to suck.  Most people use large email providers such as Gmail, and most large email providers treat email from non-large email providers as more likely to be spam.  This is unfortunate but not unexpected, as statistically speaking, such email is more likely to be spam.</p>

<p>This led me to a interesting observation.  Running your own email server to receive email is probably fine.  You only need to use a large email service to send email.  There is no requirement that your service for sending email be the same as the service for receiving email.  I could easily setup a virtual machine (VM) in the cloud to receive email, and then find a separate service for sending email.</p>

<h2>Bifurcated Email</h2>

<p>So my next step was to find a service I could use for sending email.  Thankfully, I found one quickly.  <a href="https://sendgrid.com/">Sendgrid</a> is a well known service for sending email, and it turns out, <a href="https://sendgrid.com/pricing/">they have a free plan that allows for sending 100 emails per day</a>.  I read well over 100 emails a day, but I probably only send about 100 emails per month, so Sendgrid's free plan sounded like it would work for me.</p>

<p>So the next step was deciding on a cloud service for hosting a VM to receive email.  First, I knew I would be using <a href="http://www.openbsd.org/">OpenBSD</a> for this VM.  OpenBSD well known for its strong security-focus. It also ships with a mail server (<a href="https://www.opensmtpd.org/">smtpd</a>) with a good security record for my configuration (delivery to maildir). It's what I'm most familiar with, since I use it as an email server in my home network.  For full disclosure, I'm also an OpenBSD developer, though I mostly stick with maintaining ports related to Ruby.</p>

<p>So I needed to make sure the cloud provider I selected supported OpenBSD.  In terms of performance, my needs were very minimal. A OpenBSD VM just to receive email takes almost no resources.  You could probably run it on 64MB of RAM if you turned off kernel and library relinking, and it is hard to find a cloud provider that will let you create a VM with less than 512MB of RAM.</p>

<p>I first considered Amazon Web Services (AWS).  AWS supports very small VMs with 512MB of RAM.  It looks like the best deal for me would have been a t3a.nano VM, which if you reserve for 3 years, ends up being about $17/year.  You need to pay separately for storage, but an OpenBSD installation is very light on storage.  It's definitely possible to run with 1GB of storage, and if you want to be safe, maybe 2GB.  With 2GB, that would bring the total cost to about $19/year. AWS also gives you the equivalent of a full year of free service for new accounts, so it wouldn't cost anything right away.</p>

<p>I was definitely considering AWS, but the main reason I decided against it is they do not officially support OpenBSD.  There are <a href="https://github.com/ajacoutot/aws-openbsd">tools you can use to build your own OpenBSD AMI file to use with AWS</a>, but I didn't feel like running something unsupported, at least if I could find a reasonable alternative.</p>

<p>I searched for <code>openbsd cloud</code> and the first thing that popped up was <a href="https://www.vultr.com/">Vultr</a>.  They officially support OpenBSD in the cloud and make it very easy to use.  The price for Vultr's smallest VM was more expensive than the price for the 3-year reserved t3a.nano instance at Amazon.  When I first looked at their service, the smallest VM that I saw they supported was $60/year for 1GB of RAM and 25GB of disk. However, I found that they also offered $50 in credit for new signups, which was almost a full year for the smallest server.  I decided to go with Vultr.  It was the same cost as Fastmail, but I knew that running my own server would make things like alias creation easier, since I could make it scriptable.  Plus, if in the future I could benefit from a VM in the cloud, I would already have one available.</p>

<h2>Mail Server Setup</h2>

<p>Setting up an OpenBSD VM on Vultr was easy.  I was lazy and didn't choose to upload my own ISO, I just picked OpenBSD from their available list of operating systems, then picked the most current version (6.9).  Installation took a couple minutes, and I was given the root password and the IP address.  From there I sshed into the VM as <code>root</code> and started setting things up.</p>

<p>I first changed the root password using <a href="https://man.openbsd.org/passwd.1">passwd</a>. Next, I setup a user named <code>jeremy</code> for myself using <a href="https://man.openbsd.org/adduser.8">adduser</a>, since I didn't want to be running as <code>root</code>.  Then I gave that user access to operate as <code>root</code> using <a href="https://man.openbsd.org/doas.1">doas</a> (similar to <code>sudo</code>, but simpler).  I edited the <a href="https://man.openbsd.org/doas.conf.5">/etc/doas.conf</a> file:</p>

<pre><code>permit persist keepenv :wheel
permit nopass keepenv root
</code></pre>

<p>I also added my public key to <code>/home/jeremy/.ssh/authorized_keys</code>.  Then I updated the <a href="https://man.openbsd.org/sshd_config.5">/etc/ssh/sshd_config</a> file to disallow password authentication and the ability for root to login (leaving other lines in the file alone):</p>

<pre><code>PermitRootLogin no
PasswordAuthentication no
</code></pre>

<p>Then I started working on configuring the mail server.  To ensure the receiving email server supported <code>STARTTLS</code> for encrypted receipt of email, I followed the instructions in <a href="https://man.openbsd.org/starttls.8">starttls(8)</a>:</p>

<pre><code># openssl genrsa -out /etc/ssl/private/vm.jeremyevans.net.key 4096
# openssl req -x509 -new -key /etc/ssl/private/vm.jeremyevans.net.key \
             -out /etc/ssl/vm.jeremyevans.net.crt -days 10395
</code></pre>

<p>Yes, I actually did setup a self-signed certificate that expires in 30 years.  Unlike browsers, servers that send email don't generally care if the SSL certificate for the receiving server is self-signed with a long expiration date, since even that is better than sending the email in plain text, which is what the sending server would do if it didn't accept the SSL certificate.  If this changes I can always look into getting a certificate signed by a trusted certificate authority.</p>

<p>I edited <a href="https://man.openbsd.org/aliases.5">/etc/mail/aliases</a> so that mail for <code>root</code> would go to <code>jeremy</code> instead (leaving other lines in this file alone):</p>

<pre><code>root: jeremy
</code></pre>

<p>I already had a list of all supported email aliases in a text file on my workstation, with one email per line, similar to:</p>

<pre><code>code@jeremyevans.net
</code></pre>

<p>It was easy to convert this to file that <code>smtpd</code> could use, then upload that to the VM:</p>

<pre><code>$ sed 's/$/  jeremy/' < emails-file > aliases-file
$ scp aliases-file vm:emails
</code></pre>

<p>Then I edited the <a href="https://man.openbsd.org/smtpd.conf.5">/etc/smtpd.conf</a> file on the VM:</p>

<pre><code>pki vm.jeremyevans.net cert "/etc/ssl/vm.jeremyevans.net.crt"
pki vm.jeremyevans.net key "/etc/ssl/private/vm.jeremyevans.net.key"

table local_aliases file:/etc/mail/aliases
table allowed_addresses file:/home/jeremy/emails

listen on lo0 tls pki vm.jeremyevans.net
listen on vio0 tls pki vm.jeremyevans.net

action from_remote_delivery maildir "/home/jeremy/Maildir/Inbox" user jeremy virtual &lt;allowed_addresses&gt;
action from_local_delivery maildir "/home/jeremy/Maildir/Inbox" alias &lt;local_aliases&gt;

match from any for domain "jeremyevans.net" action from_remote_delivery
match from local action from_local_delivery
</code></pre>

<p>This configuration listens on both the loopback address (<code>lo0</code>) and the network interface (<code>vio0</code>), and supports <code>STARTTLS</code> on both (though it isn't needed on the loopback). For emails received on loopback, those use the local aliases file (<code>/etc/mail/aliases</code>).  For emails received on the network interface, it uses the list of aliases I uploaded, with all of the aliases pointing to <code>jeremy</code>.  In both cases, all email is delivered to a single <a href="https://en.wikipedia.org/wiki/Maildir">maildir</a>, with a separate file per email. <code>smtpd</code> will create the maildir for me, with the correct ownership and permissions.</p>

<p>For security, I wanted to make sure that only the SSH and SMTP ports were open. I also wanted to allow ICMP so I could ping the server. So I edited <a href="https://man.openbsd.org/pf.conf.5">/etc/pf.conf</a>:</p>

<pre><code>if = "vio0"
set skip on lo
block return    # block by default
pass in on $if inet proto icmp
pass in on $if inet proto tcp to port {22, 25}
pass out on $if
</code></pre>

<p>If I cared more I would probably have setup egress filtering, but I didn't care enough to do that.</p>

<p>Most of the daemons that OpenBSD runs by default are helpful, but in this case, I didn't need to support sound or IPv6, so I disabled the related daemons using <a href="https://man.openbsd.org/rcctl.8">rcctl</a>:</p>

<pre><code># rcctl disable slaacd sndiod
</code></pre>

<p>At this point, I remembered it's a good idea to apply the latest security patches using <a href="https://man.openbsd.org/syspatch.8">syspatch</a>, so I did that:</p>

<pre><code># syspatch
# reboot
</code></pre>

<p>I then tested with <a href="https://man.openbsd.org/telnet.1">telnet</a> and made sure I could receive an email, and it went through fine, with the email file showing up in <code>/home/jeremy/Maildir/Inbox/new</code> in the VM.  Now I needed to get that email file in my local machine, which uses a similar maildir setup.  I use <a href="http://www.mutt.org/">mutt</a> for reading the email directly from the maildir.  With Tuffmail, I was using secure POP3 to download the email, but I didn't have any experience setting up a POP3 server.  However, I determined that wasn't necessary to do that.  Since I control both the server and the client, I can just use <a href="https://rsync.samba.org/">rsync</a> the files.</p>

<p>Since <a href="https://man.openbsd.org/openrsync.1">openrsync</a> would require additional setup, I decided to install <code>rsync</code> on the VM:</p>

<pre><code># pkg_add rsync
</code></pre>

<p>A basic transfer using <code>rsync</code> was fine:</p>

<pre><code>/usr/local/bin/rsync -rt --remove-source-files vm:Maildir/Inbox/new/ ~/Maildir/Inbox/new/
</code></pre>

<p>However, this needed to be automated.  I had a <a href="https://man.openbsd.org/cron.8">cron</a> job that ran every 5 minutes to download email from Tuffmail via POP3, and I needed something similar for downloading email from the VM via <code>rsync</code>.  However, I don't want the cron job to use my <a href="https://man.openbsd.org/ssh-agent.1">ssh-agent</a>, and therefore decided to setup a separate passwordless SSH key for this using <a href="https://man.openbsd.org/ssh-keygen.1">ssh-keygen</a>, and add it to the <code>/home/jeremy/.ssh/authorized_keys</code> file on the VM:</p>

<pre><code>ssh-keygen -t ed25519 -f ~/.ssh/vm-emails_ed25519
cat ~/.ssh/vm-emails_ed25519.pub | ssh vm "sh -c cat &gt;&gt; .ssh/authorized_keys"
</code></pre>

<p>Then I updated my <a href="https://man.openbsd.org/ssh_config.5">~/.ssh/config</a> file to use this dedicated passwordless key:</p>

<pre><code>Host vm-emails
Hostname vm.jeremyevans.net
IdentitiesOnly yes
IdentityFile ~/.ssh/vm-emails_ed25519
</code></pre>

<p>The script to download emails from the VM only changed slightly for the new <code>Host</code> entry:</p>

<pre><code>/usr/local/bin/rsync -rt --remove-source-files vm-emails:Maildir/Inbox/new/ ~/Maildir/Inbox/new/
</code></pre>

<p>Then I ran <a href="https://man.openbsd.org/crontab.5">crontab -e</a> to add the cron job:</p>

<pre><code>0,5,10,15,20,25,30,35,40,45,50,55       *       *       *       *       /home/jeremy/bin/download-received-emails
</code></pre>

<p>This works well, but it would allow the use of the dedicated passwordless SSH key for general server login, which is a bad idea from a security perspective.  So I wanted to lock that down.  I found a <a href="https://gist.github.com/jyap808/8700714">good tutorial on how restrict SSH key usage for rsync</a>, and then added this to the start of the appropriate entry in <code>/home/jeremy/.ssh/authorized_keys</code> in the VM:</p>

<pre><code>command="rsync --server --sender -tre.iLfxCIvu --remove-source-files . Maildir/Inbox/new/" 
</code></pre>

<p>So with all that setup, every 5 minutes my workstation downloads new emails from the VM using <code>rsync</code> over SSH, which I then can read with <code>mutt</code>.</p>

<p>While this was going on, I was still receiving email via Tuffmail, since I hadn't changed my DNS MX record.  After a few more tests, I decided to switch my MX record to point to the VM, and things basically continued to work.  I immediately tested manually from Gmail and saw the email go through the VM. Within an hour (the TTL for the MX record), all of the incoming email had switched from Tuffmail to the VM.</p>

<p>It's always important to think about backup, so I setup a backup configuration similar to what I use on my home machines.  I created an <code>/etc/backup_list</code> file, with paths of the files and folders I want to backup.  I ony needed to add things here that I modified after the VM installed, so the file is small:</p>

<pre><code>etc/adduser.conf
etc/backup_list
etc/doas.conf
etc/group
etc/localtime
etc/mail/aliases
etc/mail/smtpd.conf
etc/master.passwd
etc/passwd
etc/pwd.db
etc/pf.conf
etc/pkg_info
etc/rc.conf.local
etc/ssh
etc/ssl/private/vm.jeremyevans.net.key
etc/ssl/vm.jeremyevans.net.crt
home/jeremy/.ssh
home/jeremy/emails
root/.ssh
var/cron/tabs/root
</code></pre>

<p>I have a <code>make_backup_tarball</code> script that I use to create a backup file:</p>

<pre><code>BACKUP_LIST=/etc/backup_list
TAR_FILEPATH=/home/jeremy/vm.tar.gz

pkg_info &gt; /etc/pkg_info
tar zcpf $TAR_FILEPATH -C / -I $BACKUP_LIST
chmod 440 $TAR_FILEPATH
chown jeremy:jeremy $TAR_FILEPATH
</code></pre>

<h2>Sending Email Setup</h2>

<p>Setting up Sendgrid was easy.  I signed up for a free account, then walked through the process of verifying my domain, which involved adding 3 DNS CNAME records.  After that, I created an Sendgrid API key with only <code>Mail Send</code> permissions.</p>

<p>To switch from using Tuffmail to using Sendgrid to send emails, in <code>/etc/mail/smtpd.conf</code> in my local network, I switched:</p>

<pre><code>table secrets file:/etc/mail/secrets
action relay_mail relay host smtp+tls://tuffmail@smtp.mxes.net:587 auth <secrets>
</code></pre>

<p>to:</p>

<pre><code>table secrets file:/etc/mail/secrets
action relay_mail relay host smtp+tls://sendgrid@smtp.sendgrid.net:587 auth <secrets>
</code></pre>

<p>And updated the <code>/etc/mail/secrets</code> file for the change:</p>

<pre><code>sendgrid apikey:***API_KEY_HERE***
</code></pre>

<p>Then I tested sending an email to my Gmail account, and checked that it was correctly send through Sendgrid.</p>

<h2>Cost Reduction</h2>

<p>While writing this post, I found that Vultr actually offers a cheaper VM.  Instead of $60/year for 1GB of RAM and 25GB of storage, you can spend $42/year for 512MB of RAM and 10GB of storage.  There's also a $30/year VM for 512MB of RAM and 10GB of storage, if you are willing to switch to IPv6 only. However, I actually want to receive mail, so I cannot use the IPv6-only option. The reason I didn't see this originally is this VM type wasn't available in the Silicon Valley datacenter I picked.  I would have to switch from Silicon Valley to New Jersey to get the cheaper VM.</p>

<p>Again, I'm a frugal guy, so saving $18/year seems like a good idea to me.  Vultr doesn't let you downgrade VMs, so I spun up a new VM with the $42/year plan, copied the the backup I had already created, than ran the following commands to restore the configuration onto the cheaper VM:</p>

<pre><code># tar zxpf vm.tar.gz -C /
# pwd_mkdb /etc/master.passwd
# pkg_add rsync
# syspatch
# reboot
</code></pre>

<p>The latency when working on the $42/year VM hosted in New Jersey was noticeably worse than the $60/year VM hosted in Silicon Valley. However, if you are also frugal, I'm sure you'll agree that's a small price to pay to save $18/year.</p>

<p>After checking that the $42/year VM worked, I switched the DNS A record to point to it instead of the $60/year VM. After the DNS A record TTL expired, I checked and made sure there was no received email on the $60/year VM, then I turned off and deleted it.  I still have the $50 in Vultr credit, which will now last me about 14 months instead of 10.  After the free period expires, this will still be more expensive than the $24/year I was paying previously, but it allows me to write a small script to add an email alias, instead of forcing me to login and mess with a web application. Hopefully prices for VMs will continue to fall, though I expect we will soon be at a point where the cost of the IPv4 address is the majority of the cost of a small VM.</p>

<h2>Conclusion</h2>

<p>I think this bifurcated setup with a cloud VM receiving email and using Sendgrid's free plan for sending email is the cheapest and simplest option that meets my uncommon needs. It is still more expensive than what I was paying Tuffmail ($42/year instead of $24/year), but I suppose I'll manage.  I am not currently doing any spam filtering on received email, which results in more spam getting through.  That doesn't bother me much, since I can almost always tell what is spam before I open it in <code>mutt</code>, and I just delete spam before opening it.  On the plus side, I no longer have to be worried about email being sent to me not arriving because it was marked as spam.  Sendgrid is also a larger email provider than Tuffmail, so I'm guessing my email delivery is better, though that doesn't matter much as I don't send much email.</p>
